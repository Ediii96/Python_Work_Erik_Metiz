# 4-3. Считаем до 20: используйте цикл for для вывода чисел от 1 до 20 включительно.
def for_num(a, b):
    for num in range(a, b+1):
        print(num)
# for_num(1, 20)

# 4-4. Миллион: создайте список чисел от 1 до 1 000 000, затем воспользуйтесь циклом for для вывода чисел.
# (Если вывод занимает слишком много времени, остановите его нажатием Ctrl+C или закройте окно вывода.)

def one_million():
    for num in range(1, 1000001):
        print(num)
# one_million()

# 4-5. Суммирование миллиона чисел: создайте список чисел от 1 до 1 000 000, затем воспользуйтесь функциями min() и max()
# и убедитесь в том, что список действительно начинается с 1 и заканчивается 1 000 000. Вызовите функцию sum() и посмотрите,
# насколько быстро Python сможет просуммировать миллион чисел.

def one_million_sum():
    num = range(1, 1000001)
    print(min(num))
    print(max(num))
    print(sum(num))
# one_million_sum()

# 4-6. Нечетные числа: воспользуйтесь третьим аргументом функции range() для создания списка нечетных чисел от 1 до 20.
# Выведите все числа в цикле for.
def odd_num():
    for num in range(1, 20, 2):
        print(num)
# odd_num()

# 4-7. Тройки: создайте список чисел, кратных 3, в диапазоне от 3 до 30. Выведите все числа своего списка в цикле for.

def three_num():
    for num in range(3, 30, 3):
        print(num)
# three_num()

# 4-8. Кубы: результат возведения числа в третью степень называется кубом. Например, куб 2 записывается в языке
# Python в виде 2**3. Создайте список первых 10 кубов (то есть кубов всех целых чисел от 1 до 10) и выведите значения
# всех кубов в цикле for.

def cube_num():
    for num in range(1, 11):
        print(num**3)
# cube_num()

# 4-9. Генератор кубов: используйте конструкцию генератора списка для создания списка первых 10 кубов.

def cube_num_new():
    cubes = [number**3 for number in range(1, 11)]
    print(cubes)
    for value in cubes:
        print(value)
cube_num_new()